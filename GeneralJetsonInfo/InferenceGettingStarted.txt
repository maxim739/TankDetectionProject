Download the git
	git clone --recursive http://github.com/dusty-nv/jetson-inference
Going to jetson-inference
	cd jetson-inference
Running opening script in docker container
	docker/run.sh
	(To download models in the future run models-donload.sh in jetson-inference/tools)
Download proper models brought up, download specific or all of them
There are listed directories that are mounted from the host device into the container on Jetson-Inference GitHub
	(To mount your own directories into the container, run "--volume HOST_DIR:MOUNT_DIR" argument to "docker/run.sh"
Run the detectnet model with
	detectnet csi://0

Create a directory in jetson-inference/python/training/detection/ssd/data and name it the type of things you will be detecting, or the name of your model.

	In this dir create a labels.txt file that holds the labels that you will want to detect
		Make sure there are no empty lines or spaces around the labels
		Order the labels in alphabetical order

Start camera-capture csi://0 in the docker container (Mount jetson-inference in container for keeping labeled images avaliable)
	Point the tool towards the directory in ssd/data
	Point the tool to the labels file you created
		If you don't want to capture live images, you can take photos, label them with another tool, and put them in the same place the camera-capture tool will place them. Make sure to copy the file structure that the camera-capture tool creates

	Left off training the squares dataset
		https://github.com/dusty-nv/jetson-inference/blob/master/docs/pytorch-collect-detection.md
		docker/run.sh --volume ~/jetson-inference:/jetson-inference
		Dir = jetson-inference/python/training/ssd/data/squares
		Labels = jetson-inference/python/training/ssd/data/squares/labels.txt
		
Training the data:
1) Navigate to the detection/ssd directory
2) python3 train_ssd.py --dataset-type=voc --data=<Path to your data> --model-dir=<your model> --epochs=<# epochs>
	This is data in the pascal-voc format, which is why we say dataset type is voc
		Ex. python3 train_ssd.py --dataset-type=voc --data=data/squares --model-dir=models/squares100 --batch-size=2 --workers=1 --epochs=100

Convert the model to onnx:
1) python3 onnx_export.py --model-dir=models/<yourmodel>

Running Your Model:
1) detectnet --model=models/<your-model>/ssd-mobilenet.onnx --labels=models/<model-name>/labels.txt --input-blob=input_0 --output-cvg=scores --output-bbox=boxes csi://0
